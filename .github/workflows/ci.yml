name: CI/CD Pipeline

on:
  push:
    branches: [main]
    tags: ["v*"] # Trigger on tags starting with "v"
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

# Ensure that only one run per branch/commit is active at once.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # === QUALITY JOB: Lint and format checks ===
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history is available if needed by linters
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install ".[lint]"
      - name: Run Ruff checks
        run: |
          ruff check .
          ruff format --check .

  # === TEST JOB: Run tests on multiple Python versions and OS (optional) ===
  test:
    name: Run Tests
    needs: quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        # Uncomment or modify the following line if you need cross‚Äêplatform testing:
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ".[test]"
      - name: Run tests with Pytest
        run: pytest -n auto --maxfail=1 --disable-warnings --cov-report=xml --cov-config=pyproject.toml --cov=src/twat_mp --cov=tests tests/
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

  # === BUILD JOB: Create distribution artifacts ===
  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python 3.12 for Build
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build hatchling hatch-vcs
      - name: Build distributions
        run: python -m build --outdir dist
      - name: Upload distribution artifacts
        id: upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 5

  # === PUBLISH JOB: Publish to PyPI on tagged commits ===
  publish:
    name: Publish to PyPI
    needs: build
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/twat-mp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Python for Publishing
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip
      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist
          if-no-files-found: error
      - name: Verify distribution files exist
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          trusted-publisher: true
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=${GITHUB_REF#refs/tags/}
          gh release create "$tag" --title "Release $tag" --generate-notes dist/*
